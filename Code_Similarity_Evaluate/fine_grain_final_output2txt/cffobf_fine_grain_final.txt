bool PCXWritePixels(Image *image, uint8_t *pixels, FILE *outputStream) { for (int y = 0; y < image->height; y++) { uint8_t currentValue = image->paletteEnabled ? *pixels++ : 0; int runLength = 1; const int width = image->width; for (int x = 0; x < width - 1; x++) { uint8_t nextValue = *pixels++; if (nextValue == currentValue && runLength < MAX_RUN_LENGTH) { runLength++; continue; } if (runLength > 1) { fputc(runLength | RLE_MASK, outputStream); } fputc(currentValue, outputStream); currentValue = nextValue; runLength = 1; } if (runLength > 1) { fputc(runLength | RLE_MASK, outputStream); } fputc(currentValue, outputStream); } return true; }
/////
char *c_escape(const char *input_str) { size_t extra_len = 0; const char *src; for (src = input_str; *src; src++) { int esc_type = c_escape_char(*src); if (esc_type == HEX_ESCAPE) { extra_len += HEX_EXTRA_LEN; } else if (esc_type >= SIMPLE_ESCAPE_START) { extra_len += SIMPLE_EXTRA_LEN; } } if (!extra_len) { return (char *)input_str; } size_t base_len = src - input_str; char *result = xmalloc(base_len + extra_len + 3); char *dest = result; *dest++ = '"'; for (src = input_str; *src; src++) { unsigned char c = *src; int esc_type = c_escape_char(c); if (esc_type == HEX_ESCAPE) { *dest++ = '\\'; *dest++ = 'x'; *dest++ = "0123456789ABCDEF"[c >> 4]; *dest++ = "0123456789ABCDEF"[c & 0xF]; } else if (esc_type >= SIMPLE_ESCAPE_START) { *dest++ = '\\'; *dest++ = "abtnvfr"[esc_type - SIMPLE_ESCAPE_START]; } else { *dest++ = c; } } *dest++ = '"'; *dest = '\0'; return result; }
