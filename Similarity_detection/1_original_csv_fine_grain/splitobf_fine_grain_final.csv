"id","function_name","code"
"1","PCXWritePixels","bool PCXWritePixels(PCXImage *image, const uint8_t *pixels, FILE *file) { for (uint8_t plane = 0; plane < image->planes; plane++) { if (image->compressed) { uint8_t current_pixel = *pixels++; uint8_t run_length = 1; for (uint16_t pixel_index = 0; pixel_index < image->scanline_length - 1; pixel_index++) { uint8_t next_pixel = *pixels++; if (next_pixel != current_pixel || run_length == PCX_MAX_RUN_LENGTH) { if (run_length > 1 || (current_pixel & PCX_RLE_MASK)) { fputc(run_length | PCX_RLE_MASK, file); } fputc(current_pixel, file); current_pixel = next_pixel; run_length = 1; } else { run_length++; } } if (run_length > 1 || (current_pixel & PCX_RLE_MASK)) { fputc(run_length | PCX_RLE_MASK, file); } fputc(current_pixel, file); } else { for (uint16_t pixel_index = 0; pixel_index < image->scanline_length; pixel_index++) { fputc(*pixels++, file); } } } return true; }"
"2","c_escape","char *c_escape(const char *input) { const char *src = input; size_t escaped_length = 0; bool needs_quotes = false; while (*src) { if (*src == ' ') { needs_quotes = true; } else { char esc = c_escape_char(*src); escaped_length += esc ? (esc == OCTAL_ESCAPE ? 4 : 2) : 1; } src++; } if (!needs_quotes && escaped_length == 0) { return (char *)input; } size_t original_length = src - input; size_t total_length = original_length + escaped_length + 2; char *buffer = xmalloc(total_length); char *dst = buffer; *dst++ = '""""'; for (src = input; *src; src++) { char esc = c_escape_char(*src); if (!esc) { *dst++ = *src; continue; } *dst++ = '\\'; if (esc == OCTAL_ESCAPE) { *dst++ = ((*src >> 6) & 3) + '0'; *dst++ = ((*src >> 3) & 7) + '0'; *dst++ = (*src & 7) + '0'; } else { *dst++ = esc; } } *dst++ = '""""'; *dst = '\0'; return buffer; }"
