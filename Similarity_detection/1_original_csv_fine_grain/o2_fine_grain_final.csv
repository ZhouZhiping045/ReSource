"id","function_name","code"
"1","PCXWritePixels","bool PCXWritePixels(PCXImage *image, uint8_t *pixels, FILE *stream) { if (!image->numRows) return true; for (uint8_t row = 0; row < image->numRows; ++row) { if (!image->compressed) { for (uint16_t i = 0; i < image->width; ++i) { WriteBlobByte(stream, pixels[i]); } } else { uint8_t currentValue = *pixels++; uint8_t runLength = 1; for (uint16_t pos = 1; pos < image->width; ++pos, ++pixels) { if (*pixels == currentValue && runLength <= PCX_MAX_RUN) { ++runLength; } else { if (runLength > 1 || (currentValue & PCX_RLE_MASK)) { WriteBlobByte(stream, runLength | PCX_RLE_MASK); } WriteBlobByte(stream, currentValue); currentValue = *pixels; runLength = 1; } } if (runLength == 1 && !(currentValue & PCX_RLE_MASK)) { WriteBlobByte(stream, currentValue); } else { WriteBlobByte(stream, runLength | PCX_RLE_MASK); WriteBlobByte(stream, currentValue); } } pixels += image->width * !image->compressed; } return true; }"
"2","c_escape","char *c_escape(char *input) { if (!input || !*input) return input; bool needs_quotes = false; size_t final_len = 0; char *ptr = input; char *end = input; while (*ptr) { if (*ptr == ' ') { needs_quotes = true; char *sp_end = ptr; while (*sp_end == ' ') sp_end++; if (!*sp_end) break; final_len += sp_end - ptr; ptr = sp_end; continue; } char esc = c_escape_char(*ptr); final_len += esc ? (esc == OCTAL_ESCAPE ? 4 : 2) : 1; end = ++ptr; } if (end != ptr) { while (end > input && *(end-1) == ' ') end--; *end = '\0'; } if (!final_len && !needs_quotes) return input; char *buf = malloc(final_len + 3); if (!buf) return NULL; char *buf_ptr = buf; *buf_ptr++ = '""""'; for (ptr = input; ptr < end; ptr++) { char esc = c_escape_char(*ptr); if (!esc) { *buf_ptr++ = *ptr; continue; } *buf_ptr++ = '\\'; if (esc == OCTAL_ESCAPE) { *buf_ptr++ = '0' + ((*ptr >> 6) & 3); *buf_ptr++ = '0' + ((*ptr >> 3) & 7); *buf_ptr++ = '0' + (*ptr & 7); } else { *buf_ptr++ = esc; } } *buf_ptr++ = '""""'; *buf_ptr = '\0'; return buf; }"
