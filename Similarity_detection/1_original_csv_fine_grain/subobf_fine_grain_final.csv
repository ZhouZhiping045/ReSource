"id","function_name","code"
"1","PCXWritePixels","bool PCXWritePixels(PCXContext *pcx, uint8_t *pixels, FILE *output) { for (int plane = 0; plane < pcx->planes; ++plane) { if (pcx->compressed) { uint8_t current = *pixels++; int run_length = 1; for (int x = 1; x < pcx->width; ++x) { uint8_t next = *pixels++; if (next == current && run_length < MAX_RUN_LENGTH) { ++run_length; continue; } if (run_length > 1 || (current & RLE_MASK)) fputc((run_length-1) | RLE_MASK, output); fputc(current, output); current = next; run_length = 1; } if (run_length > 1 || (current & RLE_MASK)) fputc((run_length-1) | RLE_MASK, output); fputc(current, output); } else { fwrite(pixels, 1, pcx->width, output); pixels += pcx->width; } } return true; }"
"2","c_escape","char *c_escape(const char *src) { const char *src_ptr; size_t escaped_len = 0; int needs_quote = 0; for (src_ptr = src; *src_ptr; ++src_ptr) { if (*src_ptr == ' ') { needs_quote = 1; continue; } int escape_type = c_escape_char(*src_ptr); escaped_len += escape_type ? (escape_type == ESCAPE_OCTAL ? 4 : 2) : 1; } size_t original_len = src_ptr - src; if (!needs_quote && escaped_len == original_len) { return (char *)src; } char *result = malloc(escaped_len + QUOTE_EXTRA); char *dst_ptr = result; *dst_ptr++ = '""""'; for (src_ptr = src; *src_ptr; ++src_ptr) { int escape_type = c_escape_char(*src_ptr); if (!escape_type) { *dst_ptr++ = *src_ptr; continue; } *dst_ptr++ = '\\'; if (escape_type == ESCAPE_OCTAL) { *dst_ptr++ = ((*src_ptr >> 6) & 3) + '0'; *dst_ptr++ = ((*src_ptr >> 3) & 7) + '0'; *dst_ptr++ = (*src_ptr & 7) + '0'; } else { *dst_ptr++ = (char)escape_type; } } *dst_ptr++ = '""""'; *dst_ptr = '\0'; return result; }"
