Query 1:
__int64 __fastcall PCXWritePixels(__int64 image, unsigned __int8 *pixels, __int64 blob)
{
    int height = *(unsigned __int8 *)(image + 17);
    unsigned __int16 width = *(_WORD *)(image + 18);
    bool compress = *(_BYTE *)(image + 2);

    for (int row = 0; row < height; ++row) {
        if (!compress) {
            for (unsigned i = 0; i < width; ++i) {
                WriteBlobByte(blob, pixels[i]);
            }
            pixels += width;
        } else {
            unsigned __int8 *end = pixels + width;
            while (pixels < end) {
                unsigned __int8 val = *pixels++;
                unsigned __int8 run = 1;
                
                while (pixels < end && *pixels == val && run < 0x3F) {
                    ++run;
                    ++pixels;
                }

                if (run > 1 || (val & 0xC0)) {
                    WriteBlobByte(blob, run | 0xC0);
                }
                WriteBlobByte(blob, val);
            }
        }
    }
    return 1;
}

/////
Query 2:
char *__fastcall c_escape(char *str)
{
    char *src = str;
    if (!*src)
        return src;

    char *cur;
    size_t extra_len = 0;
    int had_space = 0;

    for (cur = src; *cur; ) {
        for (; *cur == ' '; ++cur) {
            had_space = 1;
            if (!*cur)
                break;
        }
        if (!*cur)
            break;

        char esc = c_escape_char(*cur);
        if (esc) {
            extra_len += (esc == 1) ? 3 : 1;
        }
        ++cur;
    }

    if (!extra_len && !had_space)
        return src;

    _BYTE *buf = xmalloc(extra_len + (cur - src) + 3);
    *buf = '"';
    _BYTE *dst = buf + 1;

    for (char *p = src; *p; ) {
        if (*p == ' ') {
            do {
                ++p;
            } while (*p == ' ');
            if (!*p)
                break;
        }

        char c = *p;
        char esc = c_escape_char(c);

        if (!esc) {
            *dst++ = c;
        } else {
            *dst++ = '\\';
            if (esc == 1) {
                *dst++ = ((c >> 6) & 3) + '0';
                *dst++ = ((c >> 3) & 7) + '0';
                *dst++ = (c & 7) + '0';
            } else {
                *dst++ = esc;
            }
        }
        ++p;
    }

    *dst++ = '"';
    *dst = 0;
    return buf;
}