Query 1:
__int64 __fastcall PCXWritePixels(__int64 pcx, unsigned __int8 *pixels, __int64 blob)
{
  for (__int64 plane = 0; plane < *(unsigned __int8 *)(pcx + 17); ++plane) {
    if (*(_BYTE *)(pcx + 2)) {
      unsigned __int8 current = *pixels++;
      __int64 run_length = 1;
      
      for (__int64 x = 0; x < *(unsigned __int16 *)(pcx + 18) - 1; ++x) {
        unsigned __int8 next = *pixels++;
        if (next == current && run_length < 63) {
          ++run_length;
        } else {
          if (run_length > 1 || (current & 0xC0) == 0xC0)
            WriteBlobByte(blob, run_length | 0xC0);
          WriteBlobByte(blob, current);
          current = next;
          run_length = 1;
        }
      }
      
      if (run_length > 1 || (current & 0xC0) == 0xC0)
        WriteBlobByte(blob, run_length | 0xC0);
      WriteBlobByte(blob, current);
    } else {
      for (__int64 x = 0; x < *(unsigned __int16 *)(pcx + 18); ++x)
        WriteBlobByte(blob, *pixels++);
    }
  }
  return 1;
}

/////
Query 2:
__int64 __fastcall c_escape(_BYTE *a1)
{
    _BYTE *current = a1;
    int escape_len = 0;
    int has_space = 0;

    while (*current) {
        if (*current == ' ') {
            has_space = 1;
        } else {
            char esc = c_escape_char(*current);
            if (esc) {
                escape_len += (esc == 1) ? 3 : 1;
            }
        }
        current++;
    }

    if (!has_space && !escape_len) {
        return (__int64)a1;
    }

    size_t new_size = current - a1 + escape_len + 3;
    _BYTE *buffer = xmalloc(new_size);
    _BYTE *ptr = buffer;

    *ptr++ = '"';

    for (_BYTE *s = a1; *s; ++s) {
        char esc = c_escape_char(*s);
        if (!esc) {
            *ptr++ = *s;
            continue;
        }

        *ptr++ = '\\';
        if (esc == 1) {
            *ptr++ = ((*s >> 6) & 3) + '0';
            *ptr++ = ((*s >> 3) & 7) + '0';
            *ptr++ = (*s & 7) + '0';
        } else {
            *ptr++ = esc;
        }
    }

    *ptr++ = '"';
    *ptr = 0;
    return (__int64)buffer;
}